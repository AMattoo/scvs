// include	reporter.h
//
// Copyright and License information can be found in the file
// license.txt or license.html
//
#ifndef REPORTER_H
#define REPORTER_H

#define MAX_LINE 80
#define LONG_LINE 512

#define M_DATE              1
#define M_FILENAME          2
#define M_DELIMITER         4
#define M_TEXT              8
#define M_TEST_SCRIPT      16 
#define M_DIAG_LINE_NUMBER 32 
#define M_TESTER           64
#define M_VERSION         128 
#define M_SINGLE          256
#define M_RULE_LIST       512
#define M_TEST_DIRECTORY 1024

#if defined (MAX_PATH)
#else
 #define MAX_PATH 512
#endif

_Bool verbose = false;
_Bool debug = false;
_Bool single_rule = false;
unsigned int delimiter = ':';
char *configuration_file = "configuration.txt";


struct S_config {
   int key;
   char keyword[20];	// currently the longest keyword is 14 characters
   char value[MAX_LINE];
   _Bool set;
};

typedef struct S_config config;

static config configuration[] = {
  {M_DATE,"DATE","none",false},
  {M_TESTER,"TESTER","none",false},
  {M_TEST_DIRECTORY,"TEST_DIRECTORY","none",false},
  {M_TEST_SCRIPT, "TEST_SCRIPT","none",false},
  {M_RULE_LIST,"RULE_LIST", "none",false},
  {M_VERSION,"VERSION","none",false},
  {M_SINGLE,"SINGLE","none",false},
  {-1,"","",false}
};

struct S_test_info {
  char dir[20];      // currently the longest dir name is 13 characters 
  char testfile[25]; // currently the longest test file name is 19 characters
  int line;	     // line of code for expected diagnostic
  _Bool processed;   // if test file was processed - any entry
  int pf;	     // set if diagnostic line matches expected line,
  int extras;	     // number of extra diagnostic found.
};

typedef struct S_test_info test_information;

#include "testlist.h" // the list of tests, generated by the script 
                      // make_testlist.sh.  The file rule_list is used
                      // to make the initial file list.  This file should
                      // should not be editted by hand.
#endif
